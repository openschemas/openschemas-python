# Python CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-python/ for more details

# Variables you can customize (and containers that will be built)
# SCHEMA_BUILDER: is the schema builder name (on Docker Hub) to use.
# OPENSCHEMAS_CONTAINER: is the container that will be built, see defaults
# 

################################################################################
# Functions
################################################################################

# Defaults
defaults: &defaults
  docker:
    - image: docker:18.01.0-ce-git
  working_directory: /tmp/src

# Installation
install: &install
    name: Install gzip, gettext, python3, gcc python3-dev, jq, linux-headers
    command: |
        apk add --no-cache pigz python3 gettext jq gcc python3-dev linux-headers \
                           libffi-dev musl-dev openssl-dev

# Tests
testsetup: &testsetup
    name: install dependencies
    command: |
        python3 -m venv venv
        . venv/bin/activate
        python setup.py install
        pip install pytest

testrun: &testrun
    name: run tests
    command: |
        . venv/bin/activate
        python setup.py test

# Environment

schemaenv: &schemaenv
    name: Define container and open bases names
    command: |
        # If not set, define various container names
        if [ ! -n "${SCHEMA_BUILDER:-}" ]; then
            SCHEMA_BUILDER="openschemas/schema-builder"
        fi
        if [ ! -n "${OPENSCHEMAS_CONTAINER:-}" ]; then
            OPENSCHEMAS_CONTAINER="openschemas/openschemas"
        fi
        if [ ! -n "${OPENSCHEMAS_DOCKER_USER:-}" ]; then
            OPENSCHEMAS_DOCKER_USER="openschemas"
        fi
        if [ ! -n "${CIRCLE_PR_REPONAME}" ]; then
            REPO_NAME=openschemas/openschemas-python
        else
            REPO_NAME=${CIRCLE_PR_USERNAME}/${CIRCLE_PR_REPONAME}
        fi
        echo "Open Bases OpenSchema builder is ${SCHEMA_BUILDER}"
        # export to bash environment
        echo "export SCHEMA_BUILDER=${SCHEMA_BUILDER}" >> ${BASH_ENV}
        echo "export OPENSCHEMAS_CONTAINER=${OPENSCHEMAS_CONTAINER}" >> ${BASH_ENV}
        echo "export OPENSCHEMAS_DOCKER_USER=${OPENSCHEMAS_DOCKER_USER}" >> ${BASH_ENV}
        echo "export REPO_NAME=${REPO_NAME}" >> ${BASH_ENV}
        cat ${BASH_ENV}

# Installation
dockerbuild: &dockerbuild
    name: Build the openschemas/schema-builder and openschemas/openschemas containers
    command: |
        source ${BASH_ENV}
        cd /tmp
        git clone https://www.github.com/openschemas/schema-builder
        cd schema-builder
        echo "docker build -f Dockerfile.dev --build-arg OPENSCHEMAS_BRANCH=${CIRCLE_BRANCH} --build-arg OPENSCHEMAS_REPO=${REPO_NAME} -t ${SCHEMA_BUILDER} ."
        docker build -f Dockerfile.dev --build-arg OPENSCHEMAS_BRANCH=${CIRCLE_BRANCH} --build-arg OPENSCHEMAS_REPO=${REPO_NAME} -t ${SCHEMA_BUILDER} .
        echo "docker run --name schema-builder --entrypoint /bin/bash -td ${SCHEMA_BUILDER}"
        docker run --name schema-builder --entrypoint /bin/bash -td "${SCHEMA_BUILDER}"
        echo "docker exec schema-builder openschemas --version"
        docker exec schema-builder openschemas --version
        SCHEMA_BUILDER_VERSION=$(docker exec schema-builder openschemas --version)
        echo "Found version ${SCHEMA_BUILDER_VERSION}"
        echo "docker tag ${SCHEMA_BUILDER}:latest ${SCHEMA_BUILDER}:${SCHEMA_BUILDER_VERSION}"
        docker tag "${SCHEMA_BUILDER}:latest" "${SCHEMA_BUILDER}:${SCHEMA_BUILDER_VERSION}"
        echo "export SCHEMA_BUILDER_VERSION=${SCHEMA_BUILDER_VERSION}" >> ${BASH_ENV}
        cd /tmp/src
        echo "docker build -t ${OPENSCHEMAS_CONTAINER} ."
        docker build -t ${OPENSCHEMAS_CONTAINER} .
        echo "docker tag "${OPENSCHEMAS_CONTAINER}:latest" "${OPENSCHEMAS_CONTAINER}:${SCHEMA_BUILDER_VERSION}""
        docker tag "${OPENSCHEMAS_CONTAINER}:latest" "${OPENSCHEMAS_CONTAINER}:${SCHEMA_BUILDER_VERSION}"

# Docker
dockerload: &dockerload
    name: Load Docker container Image
    no_output_timeout: 30m
    command: | 
      echo "Working directory is ${PWD}"
      docker info
      set +o pipefail
      if [ -f /tmp/cache/container1.tar.gz ]; then
          apk update && apk add --no-cache pigz curl curl-dev
          pigz -d --stdout /tmp/cache/container1.tar.gz | docker load
          pigz -d --stdout /tmp/cache/container2.tar.gz | docker load
          docker images
      fi

dockersave: &dockersave
    name: Docker Save
    no_output_timeout: 40m
    command: |
        cat ${BASH_ENV}
        source ${BASH_ENV}
        echo "Saving ${OPENSCHEMAS_DOCKER_USER} containers to container{1-2}.tar.gz"
        docker images | grep ${OPENSCHEMAS_DOCKER_USER}
        mkdir -p /tmp/cache
        echo "Saving all openschemas containers"
        docker save ${SCHEMA_BUILDER}:${SCHEMA_BUILDER_VERSION} | pigz -2 -p 3 > /tmp/cache/container1.tar.gz
        docker save ${OPENSCHEMAS_CONTAINER}:${SCHEMA_BUILDER_VERSION} | pigz -2 -p 3 > /tmp/cache/container2.tar.gz

dockerdeploy: &dockerdeploy
    name: Deploy to Docker Hub
    no_output_timeout: 40m
    command: |
      source ${BASH_ENV}
      echo "Looking for ${SCHEMA_BUILDER}, ${OPENSCHEMAS_CONTAINER}"
      if [[ -n "$DOCKER_PASS" ]]; then
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push ${SCHEMA_BUILDER}
            docker push ${OPENSCHEMAS_CONTAINER}
            echo "Tagging latest images..."
            DOCKER_TAG=$(docker images | grep ${SCHEMA_BUILDER} | awk '{print $2}')
            echo "Found Docker Tag ${DOCKER_TAG}"
            docker tag ${SCHEMA_BUILDER}:${DOCKER_TAG} ${SCHEMA_BUILDER}:latest
            docker tag ${OPENSCHEMAS_CONTAINER}:${DOCKER_TAG} ${OPENSCHEMAS_CONTAINER}:latest
            docker push ${SCHEMA_BUILDER}:latest
            docker push ${OPENSCHEMAS_CONTAINER}:latest
      fi

################################################################################
# Jobs
################################################################################


version: 2
jobs:
  test:
    <<: *defaults
    steps:
      - run: *schemaenv
      - run: *install
      - checkout
      - run: *testsetup
      - run: *testrun
      - persist_to_workspace:
          root: /tmp
          paths:
            - src

  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp
      - run: *install
      - restore_cache:
          keys:
            - docker-v1-{{ .Branch }}
          paths:
            - /tmp/cache/container1.tar.gz      
            - /tmp/cache/container2.tar.gz
      - setup_remote_docker
      - run: *schemaenv
      - run: *dockerbuild
      - run: *dockersave
      - persist_to_workspace:
          root: /tmp
          paths:
            - cache/container1.tar.gz
            - cache/container2.tar.gz
            - src

  update_cache:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp
      - save_cache:
         key: docker-v1-{{ .Branch }}
         paths:
            - /tmp/cache/container1.tar.gz
            - /tmp/cache/container2.tar.gz

  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp
      - setup_remote_docker
      - run: *schemaenv
      - run: *dockerload
      - run: *dockerdeploy


################################################################################
# Workflows
################################################################################


workflows:
  version: 2
  build_test_deploy:
    jobs:
      - test:
          filters:
            branches:
              ignore: 
                - /docs?/.*/
                - gh-pages
            tags:
              only: /.*/

      - build:
          requires:
            - test
          filters:
            branches:
              ignore: 
                - /docs?/.*/
                - gh-pages
            tags:
              only: /.*/

      - update_cache:
          requires:
            - test
            - build
          filters:
            branches:
              ignore: 
                - /docs?/.*/
                - gh-pages
            tags:
              only: /.*/

      - deploy:
          requires:
            - test
            - build
            - update_cache
          filters:
            branches:
              only: master
            tags:
              only: /.*/
